// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "postgresql://root:1234@localhost:5432/fly"
  url = env("POSTGRES_SUPABASE_URL")
}
// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  workspaces    Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// one user can have many workspace, and one workspace can have many pages, but just one page's role is root, others belong to root page
model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  pages       Page[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(OWNER)
}

model Page {
  id          String      @id @default(uuid())
  children    Page[]      @relation("ParentChildPage")
  parent      Page?       @relation("ParentChildPage", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  workspace   Workspace?  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  properties  Properties?
  // page and block is one to many relationship, one page can have many blocks but one block can only belong to one page
  blocks      Block[]
  sharePage   SharePage?
}

model SharePage {
  enabled      Boolean     @default(false) // if enabled, the page can be shared
  id           String      @id @default(uuid())
  pageId       String      @unique
  passwordHash String?
  permission   Permission @default(READ)
  url          String?
  ownerUserId  String       // 存储分享者的用户ID
  Page         Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Properties {
  pageId    String    @unique
  page      Page?     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  id        String    @id @default(cuid())
  cover     String    @default("")
  title     String    @default("")
  emoji     String    @default("")
  editable  Boolean   @default(true)
  pageWidth PageWidth @default(default)
}

model Block {
  id          String  @id @unique
  type        Type
  parentId    String?
  parent      Block?  @relation("ParentChildBlock", fields: [parentId], references: [id], onDelete: Cascade)
  children    Block[] @relation("ParentChildBlock")
  content     Json    @db.Json
  props       Json    @db.Json
  page        Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId      String?
  prevBlockId String?
  nextBlockId String?
}

enum PageWidth {
  full
  default
  wide
}

enum Type {
  page
  paragraph
  heading
  bulletListItem
  numberedListItem
  divider
  callout
  todo
  codeBlock
}

enum Role {
  OWNER
  READER
}

enum Permission {
  READ
  EDIT
}

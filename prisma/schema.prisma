generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  externalUserId String      @unique
  accounts       Account[]
  sessions       Session[]
  workspaces     Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  isActive    Boolean  @default(false)
  userId      String
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(OWNER)
  pages       Page[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id          String      @id @default(uuid())
  parentId    String?
  workspaceId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  blocks      Block[]
  parent      Page?       @relation("ParentChildPage", fields: [parentId], references: [id], onDelete: Cascade)
  children    Page[]      @relation("ParentChildPage")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  properties  Properties?
  sharePage   SharePage?
}

model SharePage {
  enabled      Boolean    @default(false)
  id           String     @id @default(uuid())
  pageId       String     @unique
  passwordHash String?
  permission   Permission @default(READ)
  url          String?
  ownerUserId  String
  Page         Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Properties {
  pageId    String    @unique
  id        String    @id @default(cuid())
  cover     String    @default("")
  title     String    @default("")
  emoji     String    @default("")
  editable  Boolean   @default(true)
  pageWidth PageWidth @default(default)
  page      Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Block {
  id          String  @id @unique
  type        Type
  parentId    String?
  content     Json?   @db.Json
  props       Json    @db.Json
  pageId      String?
  prevBlockId String?
  nextBlockId String?
  page        Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  parent      Block?  @relation("ParentChildBlock", fields: [parentId], references: [id], onDelete: Cascade)
  children    Block[] @relation("ParentChildBlock")
}

enum PageWidth {
  full
  default
  wide
}

enum Type {
  page
  paragraph
  heading
  bulletListItem
  numberedListItem
  divider
  callout
  todo
  codeBlock
  image
}

enum Role {
  OWNER
  READER
}

enum Permission {
  READ
  EDIT
}
